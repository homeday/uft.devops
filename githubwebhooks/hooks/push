#!/usr/bin/env python

import sys
import json
import requests

print("abc ")

with open(sys.argv[1], 'r') as jsf:
  payload = json.loads(jsf.read())

repo_name = payload['repository']['name']
ref = payload['ref'].split('/')
branch_name = ref[2]
#
# Handle push of tags
#
if ref[1] == "tags":
  print("The tag " + branch_name + " is pushed. Exiting...")
  # exit if tag pushed
  sys.exit()


#
# Build list of changed files
#
changed_files =[]
for commit in payload['commits']:
  added_files = commit['added']
  modified_files = commit['modified']
  removed_files = commit['removed']
  changed_files = list(set(added_files) | set(modified_files) | set(removed_files) | set(changed_files))

#
# Determine if branch is an official branch
#
branch_is_official = False
with open('/src/config/official_branches') as official_branches:
  if branch_name in official_branches.read():
    branch_is_official = True

if not branch_is_official :
    print "Not offical branch, existing ... "
    sys.exit()

#
# Check if path is in changed files list and raise flag
#
# Set sub_tree according to repo - See if ... elif construction below
#sub_tree = "a/b/c/d"
#sub_tree_found = "false"
#if any(sub_tree in x for x in changed_files):
#  sub_tree_found = "true"

#
# Fire jenkins job
#
jenkins_server="mydtbld0120.hpeswlab.net"
jenkins_port="8080"
jenkins_job_params = {'token': 'UFTBUILDTOKEN'}
jenkins_job_name=""
r=None

# Set job name according to repo
if repo_name == 'uft.devops' and branch_name == 'master' :
    jenkins_job_name = "/job/UFTBase.14.50.Build.Launcher"
elif repo_name == 'st' and branch_name == 'master' :
    jenkins_job_name = "/job/ST.14.50.Build.Launcher"
else:
    print("Do not know which Jenkins job corresponds to " + repo_name)
    print("Exiting...")
    sys.exit()

# Actually fire jenkins job
if jenkins_job_name != "":
    if len(jenkins_job_params) > 1:
      print ("Trigger Job http://" + jenkins_server+":"+jenkins_port+jenkins_job_name + "/buildWithParameters| params= jenkins_job_params")
      r=requests.get("http://" + jenkins_server + ":" + jenkins_port +
                  jenkins_job_name + "/buildWithParameters",
                  params=jenkins_job_params)
    else:
      print ("Trigger Job http://" + jenkins_server+":"+jenkins_port+jenkins_job_name + "/build | params= jenkins_job_params")
      r=requests.get("http://" + jenkins_server + ":" + jenkins_port +
                  jenkins_job_name + "/build",
                  params=jenkins_job_params)
                   
#
# Write log file
#
outfile = "/src/out/hook-" + repo_name + "-" + branch_name + ".log"
with open(outfile, 'w') as f:
    f.write(json.dumps(payload, sort_keys=True, indent=4, separators=(',',': ')))
    f.write("\nbranch_name = " + branch_name)
    if branch_is_official:
      f.write("\nbranch is official")
    else:
      f.write("\nbranch is not official")
    f.write("\nurl="+r.url) 
    f.write("\nrsp="+r.text)      
    
    f.write("\nrepo_name = " + repo_name)
    f.write("\njenkins job name = " + jenkins_job_name)
    for file in changed_files:
      f.write("\nchanged file: " + file)
    f.write("\n")
