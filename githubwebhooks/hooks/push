#!/usr/bin/env python

############################################
## This script processes git 'push' event
############################################

from __future__ import print_function
import os
import sys
import tempfile
import json
import requests
import yaml

# this script is called by 'webhooks.py' with arguments:
# payloadfile event

# test event which must be "push"
event = sys.argv[2]
if event != "push":
  print('The event "{}" is not "push". Exit.'.format(event))
  sys.exit()

# get payload from file
with open(sys.argv[1], 'r') as jsf:
  payload = json.loads(jsf.read())
org_name = payload['organization']['login']
repo_name = payload['repository']['name']

# build list of changed files
changed_files =[]
for commit in payload['commits']:
  added_files = commit['added']
  modified_files = commit['modified']
  removed_files = commit['removed']
  changed_files = list(set(added_files) | set(modified_files) | set(removed_files) | set(changed_files))


class InvalidArgument(Exception):
  """An exception indicates an argument is invalid."""
  pass

class FileNotFound(Exception):
  """An exception indicates file is not found."""
  pass


def _load_yaml_file(yaml_file):
  """Load YAML file and return an object represents the content"""

  if not os.path.exists(yaml_file):
    raise FileNotFound('File "{}" is not found.'.format(yaml_file))

  content = None
  with open(yaml_file, 'r') as ymlfile:
    content = yaml.load(ymlfile)

  return content


def _get(obj, field_name, fail_value=None, check=False):
  '''Return the value of the specified field'''

  ret_value = None
  if obj and field_name:
    tmp_value = obj
    for fld in field_name.split('.'):
      if not isinstance(tmp_value, dict):
        raise InvalidArgument('The obj has no such field: {}'.format(field_name))
      tmp_value = tmp_value.get(fld, {})

    if tmp_value:
        ret_value = tmp_value

  if not ret_value:
    if check:
      raise ValueError('The field "{}" is set to be checked and the field value is None or empty'.format(field_name))
    else:
      ret_value = fail_value

  return ret_value



def _push_action_trigger_jenkins_job(branch_name, push_action_config):
  jenkins_enabled = _get(push_action_config, 'jenkins.enabled', False)
  if not jenkins_enabled:
    print('Jenkins action is either not configured or disabled for the branch "{}" in git repository "{}/{}".'.format(branch_name, org_name, repo_name))
  else:
    jenkins_job_url = _get(push_action_config, 'jenkins.job_url')
    if not jenkins_job_url:
      print('Jenkins job URL is not configured for the branch "{}" in git repository "{}/{}".'.format(branch_name, org_name, repo_name))
    else:
      # trigger jenkins job
      jenkins_job_params = _get(push_action_config, 'jenkins.job_parameters', {})
      jenkins_res = requests.get(jenkins_job_url, params=jenkins_job_params)
      if jenkins_res.status_code != 200:
        print('Failed to trigger Jenkins job. Status code: {}. URL: {}'.format(jenkins_res.status_code, jenkins_res.url))
      else:
        print('Jenkins job is triggered successfully. URL: {}'.format(jenkins_res.url))



def _process_branch_push(branch_name):
  # try to download and load config file by org name and repo name
  webhooks_repo_raw_file_url = os.environ.get('WEBHOOKS_REPO_RAW_FILE_URL', 'https://raw.github.houston.softwaregrp.net/uft/uft.devops')
  webhooks_repo_branch = os.environ.get('WEBHOOKS_REPO_BRANCH', 'master')
  config_file_url = '{}/{}/githubwebhooks/config/{}/{}'.format(webhooks_repo_raw_file_url, webhooks_repo_branch, org_name, repo_name)

  # try to request file via url
  res = requests.get(config_file_url)
  if res.status_code != 200:
    print('The webhooks configuration file for git repository "{}/{}" is not found. Exit. Request URL: {}'.format(org_name, repo_name, config_file_url))
    sys.exit()
  else:
    # save the response text to temporary file
    osfd, tmpfile = tempfile.mkstemp()
    with os.fdopen(osfd, 'w') as pf:
        pf.write(res.text)
    # load the saved temporary file
    cfg = _load_yaml_file(tmpfile)
    os.remove(tmpfile)
    # get config object via branch name and this push event
    push_action_cfg = _get(cfg, 'git_branches.{}.push'.format(branch_name))
    if not push_action_cfg:
      print('No "push" action is configured for the branch "{}" in git repository "{}/{}". Exit.'.format(branch_name, org_name, repo_name))
      sys.exit()
    else:
      # do corresponding action(s)
      _push_action_trigger_jenkins_job(branch_name, push_action_cfg)



def _process_tag_push(tag_name):
  print('The tag "{}" is pushed. Nothing to do. Exit.'.format(tag_name))
  sys.exit()



#
# main procedure
#
# Handle push of tags or branches
ref = payload['ref'].split('/')
if ref[1] == "tags":
  _process_tag_push(ref[2])
else:
  _process_branch_push(ref[2])
