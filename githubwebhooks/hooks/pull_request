#!/usr/bin/env python

###################################################
## This script processes git 'pull_request' event
###################################################

from __future__ import print_function
import os
import sys
import tempfile
import json
import requests
import yaml
from string import Template

# this script is called by 'webhooks.py' with arguments:
# payloadfile event

exit_code=0

# fix for self-signed certificates for GitHub Enterprise that we need to send requests
os.environ['REQUESTS_CA_BUNDLE'] = '/etc/ssl/certs/ca-certificates.crt'

# fix for GHE changed to private mode
requests_headers = {'Authorization': 'Bearer 0211f662b4b1f6b26aceaa5c1501c4bc67938c41'}

# GHE base uri
ghe_base_uri = 'https://github.houston.softwaregrp.net/api/v3'

# test event which must be "pull_request"
event = sys.argv[2]
if event != "pull_request":
  print('This script file does not process the event "{}" which is not the expected one "pull_request". Exit.'.format(event))
  sys.exit()

# get payload from file
with open(sys.argv[1], 'r') as jsf:
  payload = json.loads(jsf.read())
pr_action = payload['action']
pr_number = payload['number']
org_name = payload['organization']['login']
repo_name = payload['repository']['name']

src_repo_clone_url = payload['pull_request']['head']['repo']['clone_url']
src_repo_head_branch = payload['pull_request']['head']['ref']
src_repo_head_sha = payload['pull_request']['head']['sha']
dest_repo_base_branch = payload['pull_request']['base']['ref']


class InvalidArgument(Exception):
  """An exception indicates an argument is invalid."""
  pass

class FileNotFound(Exception):
  """An exception indicates file is not found."""
  pass


def _load_yaml_file(yaml_file):
  """Load YAML file and return an object represents the content"""

  if not os.path.exists(yaml_file):
    raise FileNotFound('File "{}" is not found.'.format(yaml_file))

  content = None
  with open(yaml_file, 'r') as ymlfile:
    content = yaml.load(ymlfile)

  return content


def _get(obj, field_name, fail_value=None, check=False):
  '''Return the value of the specified field'''

  ret_value = None
  if obj and field_name:
    tmp_value = obj
    for fld in field_name.split('.'):
      if not isinstance(tmp_value, dict):
        raise InvalidArgument('The obj has no such field: {}'.format(field_name))
      tmp_value = tmp_value.get(fld, {})

    if tmp_value:
        ret_value = tmp_value

  if not ret_value:
    if check:
      raise ValueError('The field "{}" is set to be checked and the field value is None or empty'.format(field_name))
    else:
      ret_value = fail_value

  return ret_value


def _ghe_retrieve_user_info(usr_payload):
  # check "type" from payload
  if usr_payload and usr_payload['type'] == 'User' and usr_payload['url'] != "":
    usr_res = requests.get(usr_payload['url'], headers=requests_headers)
    if usr_res.status_code >= 400:
      print('Failed to retrieve user info from GitHub Enterprise. Status code: {}. URL: {}'.format(usr_res.status_code, usr_res.url), file=sys.stderr)
    else:
      return usr_res.json()


def _pull_request_notification_email_list():
  pr_owner = _ghe_retrieve_user_info(_get(payload, 'pull_request.user'))
  committer = _ghe_retrieve_user_info(_get(payload, 'pull_request.head.user'))
  hook_sender = _ghe_retrieve_user_info(payload['sender'])
  email_list = []
  if pr_owner and pr_owner['email']:
    email_list.append(pr_owner['email'])
  if committer and committer['email']:
    email_list.append(committer['email'])
  if hook_sender and hook_sender['email']:
    email_list.append(hook_sender['email'])
  # remove duplicates
  email_list = list(set(email_list))
  return ','.join(email_list)


def _pull_request_action_trigger_jenkins_job(pull_request_action_type, base_branch_name, action_config):
  jenkins_enabled = _get(action_config, 'jenkins.enabled', False)
  if not jenkins_enabled:
    print('Jenkins action is either not configured or disabled for the PR action "{}" for the branch "{}" in git repository "{}/{}".'.format(
      pull_request_action_type, base_branch_name, org_name, repo_name))
  else:
    jenkins_job_url = _get(action_config, 'jenkins.job_url')
    if not jenkins_job_url:
      print('Jenkins job URL is not configured for the PR action "{}" for the branch "{}" in git repository "{}/{}".'.format(
        pull_request_action_type, base_branch_name, org_name, repo_name))
    else:
      # trigger jenkins job
      jenkins_job_params = _get(action_config, 'jenkins.job_parameters', {})
      for pkey in jenkins_job_params:
        pvalue = jenkins_job_params[pkey]
        if isinstance(pvalue, dict):
          runtime_var = _get(pvalue, 'runtime')
          if runtime_var == '_head_repo_clone_url_':
            jenkins_job_params[pkey] = src_repo_clone_url
          elif runtime_var == '_head_branch_':
            jenkins_job_params[pkey] = src_repo_head_branch
          elif runtime_var == '_head_sha_':
            jenkins_job_params[pkey] = src_repo_head_sha
          elif runtime_var == '_base_branch_':
            jenkins_job_params[pkey] = base_branch_name
          elif runtime_var == '_pull_request_id_':
            jenkins_job_params[pkey] = pr_number
          elif runtime_var == '_notification_email_list_':
            jenkins_job_params[pkey] = _pull_request_notification_email_list()
          else:
            jenkins_job_params[pkey] = str(pvalue)
        else:
          jenkins_job_params[pkey] = str(pvalue)

      jenkins_res = requests.get(jenkins_job_url, params=jenkins_job_params, headers=requests_headers)
      if jenkins_res.status_code >= 400:
        print('Failed to trigger Jenkins job. Status code: {}. URL: {}'.format(jenkins_res.status_code, jenkins_res.url), file=sys.stderr)
        global exit_code
        exit_code = jenkins_res.status_code
      else:
        print('Jenkins job is triggered successfully. URL: {}'.format(jenkins_res.url))


def _pull_request_action_robots(pull_request_action_type, base_branch_name, action_config):
  robots = _get(action_config, 'robots', {})
  if 'notes_writter' in robots:
    _pull_request_action_robot_notes_writter(pull_request_action_type, base_branch_name, robots['notes_writter'])


def _pull_request_action_robot_notes_writter(pull_request_action_type, base_branch_name, robot_config):
  robot_enabled = _get(robot_config, 'enabled', False)
  if not robot_enabled:
    print('Robot action "notes_writter" is either not configured or disabled for the PR action "{}" for the branch "{}" in git repository "{}/{}".'.format(
      pull_request_action_type, base_branch_name, org_name, repo_name))
  else:
    t = Template(_get(robot_config, 'body', ''))
    placeholders = _get(robot_config, 'placeholders', {})
    for name in placeholders:
      ph = placeholders[name]
      if 'URI_BUILDER' in ph:
        placeholders[name] = _utils_uri_builder(ph['URI_BUILDER'])
    body = t.safe_substitute(placeholders)
    # send request
    api_url = '{base_url}/repos/{org}/{repo}/pulls/{pr}/reviews'.format(base_url=ghe_base_uri, org=org_name, repo=repo_name, pr=pr_number)
    resp = requests.post(api_url, json={'body': body, 'event': 'COMMENT'}, headers=requests_headers)
    if resp.status_code >= 400:
      print('Failed to add pull request review. Status code: {}. URL: {}'.format(resp.status_code, resp.url), file=sys.stderr)
      global exit_code
      exit_code = resp.status_code
    else:
      print('Pull request comment is added successfully.')


def _utils_uri_builder(config={}):
  d = {}
  d['schema'] = 'http'
  d['host'] = 'localhost'
  d['base_uri'] = '/'
  d.update(config)

  uri = '{schema}://{host}{base_uri}'.format(**d)

  qStr = '?src=ghe'
  query = _get(d, 'query', {})
  for qKey in query:
    qVal = query[qKey]
    if isinstance(qVal, dict):
      runtime_var = _get(qVal, 'runtime')
      if runtime_var == '_head_repo_clone_url_':
        qStr += '&{}={}'.format(qKey, requests.utils.quote(src_repo_clone_url))
      elif runtime_var == '_head_branch_':
        qStr += '&{}={}'.format(qKey, requests.utils.quote(src_repo_head_branch))
      elif runtime_var == '_head_sha_':
        qStr += '&{}={}'.format(qKey, requests.utils.quote(src_repo_head_sha))
      elif runtime_var == '_base_branch_':
        qStr += '&{}={}'.format(qKey, requests.utils.quote(dest_repo_base_branch))
      elif runtime_var == '_pull_request_id_':
        qStr += '&{}={}'.format(qKey, requests.utils.quote(pr_number))
      elif runtime_var == '_notification_email_list_':
        qStr += '&{}={}'.format(qKey, requests.utils.quote(_pull_request_notification_email_list()))
      else:
        qStr += '&{}={}'.format(qKey, requests.utils.quote(str(qVal)))
    else:
      qStr += '&{}={}'.format(qKey, requests.utils.quote(str(qVal)))

  return uri + qStr


#
# main procedure
#
# Handle pull_request event
# try to download and load config file by org name and repo name
webhooks_repo_raw_file_url = os.environ.get('WEBHOOKS_REPO_RAW_FILE_URL', 'https://raw.github.houston.softwaregrp.net/uft/uft.devops')
webhooks_repo_branch = os.environ.get('WEBHOOKS_REPO_BRANCH', 'master')
config_file_url = '{}/{}/githubwebhooks/config/{}/{}.yml'.format(webhooks_repo_raw_file_url, webhooks_repo_branch, org_name, repo_name)

# try to request file via url
res = requests.get(config_file_url, headers=requests_headers)
if res.status_code != 200:
  print('The webhooks configuration file for git repository "{}/{}" is not found. Exit. Request URL: {}'.format(org_name, repo_name, config_file_url))
  sys.exit()
else:
  # save the response text to temporary file
  osfd, tmpfile = tempfile.mkstemp()
  with os.fdopen(osfd, 'w') as pf:
      pf.write(res.text)
  # load the saved temporary file
  cfg = _load_yaml_file(tmpfile)
  os.remove(tmpfile)
  # get config object via base branch name and pull_request event type
  action_cfg = _get(cfg, 'git_branches.{}.pull_request.{}'.format(dest_repo_base_branch, pr_action))
  if not action_cfg:
    print('No "pull_request ({})" action is configured for the branch "{}" in git repository "{}/{}". Exit.'.format(pr_action, dest_repo_base_branch, org_name, repo_name))
    sys.exit()
  else:
    # do corresponding action(s)
    _pull_request_action_trigger_jenkins_job(pr_action, dest_repo_base_branch, action_cfg)
    _pull_request_action_robots(pr_action, dest_repo_base_branch, action_cfg)


